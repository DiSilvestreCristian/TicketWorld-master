<?php

namespace App\Http\Controllers;

use App\Models\PublicModel;
use Faker\Provider\DateTime;
use Illuminate\Support\Facades\Auth;

class PublicController extends Controller {

    protected $_PublicModel;

    public function __construct() {
        $this->_PublicModel = new PublicModel;
    }

    public function showHome() {

        //Nuovi concerti
        $newer = $this->_PublicModel->getNewer();

        //Concerti richiesti
        $requested = $this->_PublicModel->getRequested();

        return view('home')
                        ->with('newer', $newer)
                        ->with('requested', $requested);

    }

    public function showCatalog() {

        // Tutti gli eventi (senza filtro)
        $eventi = $this->_PublicModel->getEvents();
        $organizzatori = $this->_PublicModel->getOrg();

        $sconti = [];
        foreach ($eventi as $evento) {
            array_push($sconti, $this->_PublicModel->checkDiscount($evento->event_id));
        }

        return view('catalogo')
            ->with('eventi', $eventi)
            ->with('organizzatori', $organizzatori)
            ->with('sconti', $sconti);

    }

    public function processFilterForm() {

        unset($_POST['_token']);
        $filtro = serialize($_POST);

        return redirect('/catalogo/filtro/'.$filtro);
    }

    public function showFilteredCatalog($filtro) {

        $array = unserialize($filtro);

        $filteredEvents = $this->_PublicModel->getFilteredEvents($array);

        $organizzatori = $this->_PublicModel->getOrg();

        $sconti = [];
        foreach ($filteredEvents as $evento) {
            array_push($sconti, $this->_PublicModel->checkDiscount($evento->event_id));
        }

        return view('catalogo')
            ->with('eventi', $filteredEvents)
            ->with('organizzatori', $organizzatori)
            ->with('filtri', $array)
            ->with('sconti', $sconti);

    }

    public function eventDetails($id_evento) {

        $evento = $this->_PublicModel->getEventDetails($id_evento);
        if($evento[0]->data < date("Y-m-d")) abort(403, "L'evento si è già svolto");
        $num = $this->_PublicModel->getPartNum($id_evento);

        if(!is_null(Auth::id())) $partecipo = $this->_PublicModel->checkPart($id_evento, Auth::id());
        else $partecipo = false;

        $sconti = [];
        foreach ($evento as $concerto) {
            array_push($sconti, $this->_PublicModel->checkDiscount($concerto->event_id));
        }

        $link_mappa = "https://maps.google.com/maps/embed/v1/place?key=AIzaSyA5uEgB-DHKApt9ujCk6iMSXpwtl_JKINs&zoom=17&q="
            .str_replace(" ", "%20", $evento[0]->luogo);

        return view('scheda_evento')
            ->with('evento', $evento[0])
            ->with('partecipanti', $num)
            ->with('partecipo', $partecipo)
            ->with('sconti', $sconti[0])
            ->with('link_mappa', $link_mappa);
    }

    public function showFAQ() {

        $faq = $this->_PublicModel->getFAQ();

        return view('faq')
            ->with('faq', $faq);
    }

    public function __call($method, $parameters)
    {
        parent::__call($method, $parameters); // TODO: Change the autogenerated stub
    }

}
